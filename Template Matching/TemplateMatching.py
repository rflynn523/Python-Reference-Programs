# Runs in Google Colab
# Solves "Where's Waldo?" puzzle using template mathing techniques.

# -*- coding: utf-8 -*-
"""Template Matching.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hoxdiZli-JK3K77Ef85zz_sGfMvvyDW5
"""

# Ryan Flynn
# Rotic Systems, Fall 2019
# Template Matching Homework
# Puzzle 1 and Query 1

from google.colab import drive
drive.mount('/content/drive/')

!ls "/content/drive/My Drive/Colab Notebooks"

# import neccessary libraries
import numpy as np
from google.colab import files
from matplotlib import pyplot as plt
import cv2
from google.colab.patches import cv2_imshow

def main():

  # Load Puzzle image and convert to RGB.
  puzzle = cv2.imread("/content/drive/My Drive/Colab Notebooks/HW 1/puzzle_1.jpg")
  puzzle_RGB = cv2.cvtColor(puzzle, cv2.COLOR_BGR2RGB)

  # Load the Query image
  waldo = cv2.imread("/content/drive/My Drive/Colab Notebooks/HW 1/query_1.jpg")

  # Get the dimensions of Waldo's image
  h = waldo.shape[0]
  w = waldo.shape[1]
  d = waldo.shape[2]

  # Perform the template matching: Slide template image over scene image and
  methods = ['cv2.TM_CCOEFF', 'cv2.TM_CCOEFF_NORMED', 'cv2.TM_CCORR',
            'cv2.TM_CCORR_NORMED', 'cv2.TM_SQDIFF', 'cv2.TM_SQDIFF_NORMED']

  for meth in methods:
    copy = puzzle_RGB.copy()
    method = eval(meth)

    res = cv2.matchTemplate(copy, waldo, method)
    min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(res)

    # get scores for matches at each position
    if method in [cv2.TM_SQDIFF, cv2.TM_SQDIFF_NORMED]:
      top_left = min_loc
    else:
      top_left = max_loc

    bottom_right = (top_left[0] + w, top_left[1] + h)

    # Display the results using Matplotlib and save figure in file
    plt.subplot(121),plt.imshow(res,cmap = 'gray')
    plt.title('Matching Result'), plt.xticks([]), plt.yticks([])
    plt.subplot(122),plt.imshow(copy, cmap = 'gray')
    plt.title('Detected Point'), plt.xticks([]), plt.yticks([])
    plt.suptitle(meth)

    plt.savefig("/content/drive/My Drive/Colab Notebooks/HW 1/solution/" +meth+"puzzle1_compare.jpg")
    plt.show()

    copy = cv2.cvtColor(copy, cv2.COLOR_BGR2RGB)

    # Draw rectangle on image where the best score is found
    cv2.rectangle(copy, top_left, bottom_right, 255, 2)

    # Display using OpenCV
    cv2_imshow(copy)

    # Save in file using OpenCV
    cv2.imwrite("/content/drive/My Drive/Colab Notebooks/HW 1/solution/" +meth+ "_puzzle1.jpg", copy)

  pass

if __name__ == "__main__":
  main()

# Ryan Flynn
# Robotic Systems, Fall 2019
# Template Matching Homework
# Puzzle 2 and Query 2

# This is the same code as above just with the second puzzle and
# query images used instead.

from google.colab import drive
drive.mount('/content/drive/')

!ls "/content/drive/My Drive/Colab Notebooks"

# import neccessary libraries
import numpy as np
from google.colab import files
from matplotlib import pyplot as plt
import cv2
from google.colab.patches import cv2_imshow

def main():

  # Load Puzzle image and convert to RGB.
  puzzle = cv2.imread("/content/drive/My Drive/Colab Notebooks/HW 1/puzzle_2.png")
  puzzle_RGB = cv2.cvtColor(puzzle, cv2.COLOR_BGR2RGB)

  # Load the query image.
  waldo = cv2.imread("/content/drive/My Drive/Colab Notebooks/HW 1/query_2.png")

  # Get the dimensions of Waldo's image
  h = waldo.shape[0]
  w = waldo.shape[1]
  d = waldo.shape[2]

  # Perform the template matching: Slide template image over scene image and
  methods = ['cv2.TM_CCOEFF', 'cv2.TM_CCOEFF_NORMED', 'cv2.TM_CCORR',
            'cv2.TM_CCORR_NORMED', 'cv2.TM_SQDIFF', 'cv2.TM_SQDIFF_NORMED']

  for meth in methods:
    copy = puzzle_RGB.copy()
    method = eval(meth)

    res = cv2.matchTemplate(copy, waldo, method)
    min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(res)

     # get scores for matches at each position
    if method in [cv2.TM_SQDIFF, cv2.TM_SQDIFF_NORMED]:
      top_left = min_loc
    else:
      top_left = max_loc

    bottom_right = (top_left[0] + w, top_left[1] + h)

    # Display the results using Matplotlib and save figure in file
    plt.subplot(121),plt.imshow(res,cmap = 'gray')
    plt.title('Matching Result'), plt.xticks([]), plt.yticks([])
    plt.subplot(122),plt.imshow(copy, cmap = 'gray')
    plt.title('Detected Point'), plt.xticks([]), plt.yticks([])
    plt.suptitle(meth)

    plt.savefig("/content/drive/My Drive/Colab Notebooks/HW 1/solution/" +meth+"puzzle2_compare.jpg")
    plt.show()

    copy = cv2.cvtColor(copy, cv2.COLOR_BGR2RGB)

    # Draw rectangle on image where the best score is found
    cv2.rectangle(copy, top_left, bottom_right, 255, 2)

    # Display using OpenCV
    cv2_imshow(copy)

    # Save in file using OpenCV
    cv2.imwrite("/content/drive/My Drive/Colab Notebooks/HW 1/solution/" +meth+ "_puzzle2.jpg", copy)

  pass

if __name__ == "__main__":
  main()
